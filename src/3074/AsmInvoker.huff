/// @title EIP3074 Relayer
/// @notice Simple wrapper to accept a signature + call arguments and relay an `AUTHCALL` to a target contract.
/// @author clabby <https://github.com/clabby>
/// @dev TODO: Use fork of Huff w/ `AUTH` / `AUTHCALL` support rather than inserting ops manually.

#define function relay(bytes signature, bytes data, bytes32 commit, address to) payable returns ()

/// @dev Thrown when the signature length is incorrect
#define error BadSignatureLength()

/// @dev Thrown when the `AUTH` op fails.
#define error BadAuth()

/// @dev Thrown when a `commit` has already been used.
#define error CommitUsed()

/// @notice The magic byte of the auth message.
#define constant MAGIC = 0x4

/// @notice The storage slot for the replay protection mapping.
#define constant USED_MAP_SLOT = 0x00

/// @notice Entry point
#define macro MAIN() = takes (0) returns (0) {
    // Load the function selector onto the stack
    pc calldataload 0xE0 shr    // [selector]

    // Function dispatch (Incase we want to extend the relayer for other test functions)
    dup1 __FUNC_SIG(relay) eq   // [selector == relay, selector]
    relay jumpi                 // [selector]

    // Revert if no selectors match
    0x00 0x00 revert            //<- exit

    relay:
        AUTH_RELAY()            // []
}

/// @notice Relay an `AUTHCALL` to a target contract.
/// @dev Expected calldata layout:
///      - [0x00-0x04]   - Function selector ("relay(bytes signature, bytes data, address signer, address to)")
///      - [0x04-0x24]   - Pointer to `signature` length
///      - [0x24-0x44]   - Pointer to `data` length
///      - [0x44-0x64]   - commit
///      - [0x64-0x84]   - `to` address
///      - [0x84-0xA4]   - `signature length` (should *always* be 65)
///      - [0xA4:0x104]  - `signature` contents
///      - [0x104:0x124] - `data length`
///      - [0x124:]      - `data` contents
#define macro AUTH_RELAY() = takes (0) returns (0) {
    // Check the signature length prior to invoking `AUTH`
    0x84 calldataload           // [signature_length]
    0x41 eq                     // [signature_length == 65]
    auth_step jumpi             // []

    // The signature length must be 65 bytes.
    0xd7bad83f                  // [`BadSignatureLength()`]
    0x00 mstore                 // []
    0x04 0x1C revert            //<- exit

    auth_step:
        0x44 calldataload       // [commit]

        // Check if the commit has been used
        dup1 IS_COMMIT_USED()   // [is_used, commit]
        iszero auth_step_cont   // [auth_step_cont_jumpdest, !is_used, commit]
        jumpi                   // [commit]

        0x5c9f11c9              // [`CommitUsed()`]
        0x00 mstore             // []
        0x04 0x1C revert        //<- exit

        auth_step_cont:
            // Mark the commit as used
            dup1 MARK_COMMIT_USED() // [commit]

            // Recover the signer address
            dup1                    // [commit, commit]
            COMPUTE_MESSAGE_HASH()  // [message_hash, commit]
            0xA4 mload 0xF8 shr     // [yParity, message_hash, commit]
            0x1B add                // [v, message_hash, commit]
            0x40 0xA5 0x00          // [dest_offset, src_offset, length, v, message_hash, commit]
            calldatacopy            // [v, message_hash, commit]
            0x00 mload              // [r, v, message_hash, commit]
            0x20 mload              // [s, r, v, message_hash, commit]
            ECRECOVER()             // [recovered_addr, commit]

            // Copy the signature and commit into memory @ 0x00
            0x41 0xA4               // [signature_offset_cd, signature_length, recovered_addr, commit]
            0x00 calldatacopy       // [recovered_addr, commit]
            swap1 0x41 mstore       // [recovered_addr]
            0x00                    // [args_offset_mem, recovered_addr]
            0x61 swap2              // [recovered_addr, args_offset_mem, args_len]
            // Invoke `AUTH` manually - see TODO at top level comment.
            __VERBATIM(0xF6)        // [success]
            auth_call_step jumpi    // []

            // Cannot continue if the `AUTH` op fails; `AUTHCALL` always halts the context if the `authorized`
            // environment variable is not set.
            0xd386ef3e              // [`BadAuth()`]
            0x00 mstore             // []
            0x04 0x1C revert        //<- exit

    auth_call_step:
        // Copy the data into memory @ 0x00. We clobber the signature data from above here, but that's fine. The
        // fanciest GC is assembly.
        0x104 calldataload      // [data_length]
        dup1 0x124              // [data_offset_cd, data_length, data_length]
        0x00 calldatacopy       // [data_length]

        0x00 0x00               // [ret_offset, ret_length, data_length]
        swap2                   // [data_length, ret_offset, ret_length]
        0x00 0x00               // [value_ext, data_offset, data_length, ret_offset, ret_length]
        callvalue               // [value, value_ext, data_offset, data_length, ret_offset, ret_length]
        0x64 calldataload      // [to, value, value_ext, data_offset, data_length, ret_offset, ret_length]
        gas                     // [gas, to, value, value_ext, data_offset, data_length, ret_offset, ret_length]
        // Invoke `AUTHCALL` manually - see TODO at top level comment.
        __VERBATIM(0xF7)        // [success]

        // Copy returndata into memory. Fine to clobber the calldata from above here, we're done w/ it.
        returndatasize          // [ret_size, success]
        0x00 0x00               // [dest_offset, src_offset, ret_size, success]
        returndatacopy          // [success]
        
        // If the call succeeded, bubble up the return data w/ the `RETURN` opcode.
        bubble_success jumpi    // []

        // If the call reverted, bubble up the return data w/ the `REVERT` opcode.
        returndatasize 0x00     // [ret_offset, ret_size]
        revert                  //<- exit

    bubble_success:
        returndatasize 0x00     // [ret_offset, ret_size]
        return                  //<- exit
}

/// @notice `ecrecover` the signature passed
#define macro ECRECOVER() = takes (4) returns (1) {
    // Entry stack:                [s, r, v, message_hash]

    // Setup the calldata for the `ecrecover` precompile
    0x60 mstore                 // [r, v, message_hash]
    0x40 mstore                 // [v, message_hash]
    0x20 mstore                 // [message_hash]
    0x00 mstore                 // []

    // Call the `ecrecover` precompile
    0x00 0x00                   // [ret_offset, ret_size]
    0x80 0x00                   // [args_offset, args_size, ret_offset, ret_size]
    0x01                        // [ecrecover, args_offset, args_size, ret_offset, ret_size]
    gas                         // [gas, ecrecover, args_offset, args_size, ret_offset, ret_size]
    staticcall                  // [success]
    pop                         // []

    // Ignore the error, copy returndata. Will be caught if we fail to recover via `AUTH`'s verification.
    returndatasize 0x00 0x00    // [dest_offset, src_offset, ret_size]
    returndatacopy              // []
    0x00 mload                  // [recovered_addr]

    // Exit stack:                 [recovered_addr]
}

/// @notice Computes the EIP-3074 message hash, given the `AUTHCALL` arguments.
#define macro COMPUTE_MESSAGE_HASH() = takes (1) returns (1) {
    // Entry stack:                [commit]

    [MAGIC] 0x00 mstore8        // [commit]
    chainid 0x01 mstore         // [commit]
    address 0x21 mstore         // [commit]
    0x41 mstore                 // []
    0x61 0x00 sha3              // [message_hash]

    // Exit stack:                 [message_hash]
}

/// @notice Marks a commit as used to prevent replay.
#define macro MARK_COMMIT_USED() = takes (1) returns (0) {
    // Entry stack:                [commit]

    // Compute the mapping slot
    COMPUTE_USED_MAP_SLOT()     // [value_slot]

    // Mark the commit as used
    0x01 swap1                  // [value_slot, 1]
    sstore                      // []

    // Exit stack:                 []
}

/// @notice Checks if a commit has been used.
#define macro IS_COMMIT_USED() = takes (1) returns (1) {
    // Entry stack:                [commit]

    // Compute the mapping slot
    COMPUTE_USED_MAP_SLOT()     // [value_slot]

    // Load the value
    sload                       // [value]

    // Exit stack:                 [value]
}

/// @notice Computes the value storage slot for a `commit` the replay protection mapping.
#define macro COMPUTE_USED_MAP_SLOT() = takes (1) returns (1) {
    // Entry stack:                [commit]

    // Compute the mapping slot
    [USED_MAP_SLOT] 0x00 mstore // [commit]
    0x20 mstore                 // [commit]
    0x40 0x00 sha3              // [value_slot]

    // Exit stack:                 [value_slot]
}
